################################################################################
#
# This file is used for configuring the logging setup.
#
#################################################################################


################################################################################
#
# There are five major levels of logging output:
#
# FATAL, ERROR, WARN, INFO, DEBUG
#
# Which levels to get output from in the first place is controlled in the
# container environment's log4j settings (or whatever logging implementation
# it is using).  For example the "container-log4j.properties" file.

# Two lines to add to that file:
#
#     log4j.category.org.nimbustools=DEBUG
#     log4j.category.org.globus.workspace=DEBUG
#
# It is good to start at DEBUG during setup and testing and move to INFO for
# regular deployment:
#
#     log4j.category.org.nimbustools=INFO
#     log4j.category.org.globus.workspace=INFO
#
################################################################################


################################################################################
#
# Once the logging is configured like above, there are INTERNAL logging flags
# (see CONFIGURATIONS section below) that can will increase the detail and
# number of messages for different areas of the service.
#
# NOTE:  Normally this information is unnecessary but there is one flag that is
#        is used for EVENT logging which is helpful to understand.
#
################################################################################


################################################################################
#
# ERRORS:
#
# You should never set the logger to squelch anything above INFO (like WARN
# or ERROR messages), you probably always want to see these.
#
# In DEBUG mode, a full stacktrace will often be logged, these will go away
# with moving to INFO level.
#
# See the end of this file if you are struggling to understand a big error
# wrapped in something like "**** Cause chain report ****"
#
################################################################################



#################
# CONFIGURATIONS:
#################


# EVENTS
#
# This logs key events to the INFO level, including major lifetime events,
# remote interactions, major accounting events, and forked system invocations
# to workspace-control etc. (high signal/noise)
#
# INFO level logging must be enabled for this to work (see above)

log.events=on



################################################################################
#
# The rest of the flags below only apply when logging is at DEBUG level.
#
################################################################################

# ACCOUNTING
#
# Trace logging of accounting details other than major events

log.accounting=off


# STATE
#
# Traces state transitions and task dispatch

log.state=off


# GENERAL TRACE
#
# General trace, logs many method invocations as well as some small details
# in many classes (low signal/noise)

log.trace=off


# DB
#
# Traces persistence interactions (low signal/noise)

log.db=off





################################################################################
#
# So ... you're seeing "**** Cause chain report ****"
#
# Some errors (especially initialization errors) are hooked up to do pretty
# printing of the (often very long) list of wrapped errors from various
# systems and frameworks (Spring, JNDI, Globus, etc).
#
# You can fine tune this pretty printing by passing:
#
#     "nimbus.errors.parent.number" system property, set to #
#
# ... in to the container.  This chooses how many parent messages you will see
# messages from.  Default is one.
#
# Example:
#
#    ./start-something -Dnimbus.errors.parent.number=2  [OTHER ARGS]
#
# Globus example:
#
#    export GLOBUS_OPTIONS="-Dnimbus.errors.parent.number=2"
#    ./bin/globus-start-container [OTHER ARGS]
#
#
# Also, if you are a programmer working on the service or a programmer has asked
# for it, you can generate (giant...) stack traces for each cause too, to help
# hunt down some unexpected problem not explained in the errors messages.
#
#     "nimbus.errors.stacktraces" system property, set to "true"
# 
# Globus example:
#
#    export GLOBUS_OPTIONS="-Dnimbus.errors.parent.number=2  -Dnimbus.errors.stacktraces=true"
#    ./bin/globus-start-container [OTHER ARGS]
#
################################################################################

