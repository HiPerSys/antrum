################################################################################
#
# This file is used for configuring per-client usage logging into the accounting
# database.
#
# NOTE: The accounting database is separate and stable, it can continue to be
#       used over multiple versions of Nimbus.
#
# Usage information is available for querying remotely (currently, each client
# may only query about itself).
#
# If there is an authorization plugin enabled, current usage information will
# be passed to it so that authorization decisions can be made based on past
# usage history (see group-authz/README.txt)
#
################################################################################


################################################################################
#
# Because the exact, up to date usage information is in the service's embedded
# database and there is no administrator query mechanism in place, the
# accounting module will periodically write out information.
#
# This file will contain current reservation information: a list of all current
# instances, who started them, when they will terminate, etc.
#
#     var/nimbus/current-reservations.txt
#
# This file will contain a history of "CREATED" and "REMOVED" event pairs that
# give the entire usage history (there will not be a matching "REMOVED" line
# for each "CREATED" line yet if the instance is still running)
#
#     var/nimbus/accounting-events.txt
#
################################################################################


#################
# CONFIGURATIONS:
#################


# WRITE DELAY
#
# The files discussed above are written out every 5 seconds by default.
# You can change that here, the value is the number of milliseconds.  The
# delay is actually *between* writes, so if the service or disk is very loaded
# you could see the delay increase.

write.delay.ms=5000


# CHARGE GRANULARITY
# 
# For every minute or partial minute that is used, one minute is recorded as
# used.  51.24 minutes is 52 minutes of usage.  etc.
#
# Some situations call for a different scheme where the charge is rounded up
# even more.  For example, on EC2 any amount of usage between 0 and 60 minutes
# counts as 60 minutes.  This setting is provided to mimic such behavior, it
# can be any integer greater than zero.  To do the "round up to every hour"
# behavior, this value would be 60.  But it could be 5.  Or 42.  ;-)

charge.granularity=1
